Assignment Specifications
The node class is fully implemented and provided for you. Do not modify this class.

We have provided the __init__,  __eq__, and _compare methods in the BinarySearchTree class, do not modify these methods. Your task will be to complete the methods listed below in the BinarySearchTree class that have not been completed for you. Make sure that you are adhering to the time and space complexity requirements. Do not modify function signatures in any way.

    insert(self, value):
        Takes in a value to be added to the tree as a node
        Adds the node to the tree
        Do nothing if the value is already in the tree
        O(height) time complexity

    remove(self, value):
        Takes in a key to remove from the tree
        Do nothing if the key is not found
        When removing a node with two children, replace with the minimum of the right subtree
        O(height) time complexity

    search(self, value, node):
        Takes in a value to search for and a node which is the root of a given tree or subtree
        Returns the node with the given key if found, else returns the potential parent node
        Must be recursive
        O(height) time complexity

    inorder(self, node):
        Returns a generator object of the tree traversed using the inorder method of traversal starting at the given node
        Points will be deducted if the return of this function is not a generator object(hint: yield)
        Must be recursive
        O(n) time complexity

    preorder(self, node):
        Same as inorder, only using the preorder method of traversal
        O(n) time complexity

    postorder(self, node):
        Same as inorder, only using the postorder method of traversal
        O(n) time complexity

    min(self, node):
        Returns the minimum of the tree rooted at the given node
        Must be recursive
        O(height) time complexity

    max(self, node):
        Returns the maximum of the tree rooted at the given node
        Must be recursive
        O(height) time complexity

    height(self, node):
        Returns the height of the tree rooted at the given node
        Must be recursive
        O(n) time complexity

    depth(self, value):
        Returns the depth of the node with the given value
        O(height) time complexity

    is_perfect(self, node):
        Returns a Boolean of whether or not the BST rooted at the given node is perfect
        O(n) time complexity

    is_degenerate(self):
        Returns a Boolean of whether or not the BST is degenerate
        O(n) time complexity

    get_size(self):
        Returns the number of nodes in the BST
        O(1) time complexity
